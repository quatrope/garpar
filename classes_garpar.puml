@startuml classes_garpar
set namespaceSeparator none
package Core {
  class "Portfolio" as garpar.core.portfolio.Portfolio {
    entropy
    stocks
    weights
    window_size
    as_prices()
    as_returns()
    copy()
    delisted_prune()
    from_dfkws(prices, weights, entropy, window_size, stocks)
    refresh_entropy()
    scale_weights()
    to_dataframe()
    to_hdf5(stream_or_buff)
    weights_prune(threshold)
  }
  class "PortfolioPlotter" as garpar.core.plot_acc.PortfolioPlotter {
    box(returns)
    heatmap(returns)
    hist(returns)
    kde(returns)
    line(returns)
    ogive(returns)
    wbox()
    wheatmap()
    whist()
    wkde()
  }
  class "PricesAccessor" as garpar.core.prices_acc.PricesAccessor {
    log()
    log10()
    log2()
    mad(skipna)
    mean_tendency_size()
  }
  class "RiskAccessor" as garpar.core.risk_acc.RiskAccessor {
    pf_beta
    pf_var
    var
    portfolio_beta()
    portfolio_variance(covariance, covariance_kw)
    sharpe_ratio()
    stock_beta(market_prices, log_returns)
    treynor_ratio()
    value_at_risk()
  }
  class "CorrelationAccessor" as garpar.core.covcorr_acc.CorrelationAccessor {
    exp_corr()
    ledoit_wolf_corr()
    oracle_approximating_corr()
    sample_corr()
    semi_corr()
  }
  class "CovarianceAccessor" as garpar.core.covcorr_acc.CovarianceAccessor {
    exp_cov()
    ledoit_wolf_cov(shrinkage_target)
    oracle_approximating_cov()
    sample_cov()
    semi_cov()
  }
  class "DiversificationAccessor" as garpar.core.div_acc.DiversificationAccessor {
    cross_entropy(benchmark_weights)
    ke_zang_entropy()
    mrc()
    pdi()
    ratio()
    zheng_entropy()
  }
  class "ExpectedReturnsAccessor" as garpar.core.ereturns_acc.ExpectedReturnsAccessor {
    capm()
    emah()
    mah()
  }
  class "UtilitiesAccessor" as garpar.core.utilities_acc.UtilitiesAccessor {
    pf_return
    qutility
    ex_ante_tracking_error()
    ex_post_tracking_error()
    portfolio_return()
    quadratic_utility()
  }
}
package Optimize {
  class "MVOptimizer" as garpar.optimize.mean_variance.MVOptimizer {
    covariance : _CountingAttr
    covariance_kw : _CountingAttr
    market_neutral : _CountingAttr
    method : _CountingAttr
    returns : _CountingAttr
    returns_kw : _CountingAttr
    risk_aversion : _CountingAttr
    risk_free_rate : _CountingAttr
    target_return : _CountingAttr
    target_risk : _CountingAttr
    weight_bounds : _CountingAttr
  }
  class "Markowitz" as garpar.optimize.mean_variance.Markowitz {
    covariance : _CountingAttr
    covariance_kw : _CountingAttr
    market_neutral : _CountingAttr
    method : _CountingAttr
    returns : _CountingAttr
    returns_kw : _CountingAttr
    target_return : _CountingAttr
    target_risk : _CountingAttr
    weight_bounds : _CountingAttr
  }
  class "MeanVarianceFamilyMixin" as garpar.optimize.opt_base.MeanVarianceFamilyMixin {
    family : str
  }
  class "OptimizerABC" as garpar.optimize.opt_base.OptimizerABC {
    family : object
    get_optimizer_family()
    optimize(pf)
  }
}
package datasets {
  class "MultiSector" as garpar.datasets.multisector.MultiSector {
    makers : _CountingAttr
    make_portfolio()
  }
  class "PortfolioMakerABC" as garpar.datasets.ds_base.PortfolioMakerABC {
    {abstract}make_portfolio()
  }
  class "RandomEntropyPortfolioMakerABC" as garpar.datasets.ds_base.RandomEntropyPortfolioMakerABC {
    entropy : float
    random_state : int
    {abstract}get_window_loss_probability(window_size, entropy)
    make_portfolio()
    {abstract}make_stock_price(price, loss, random)
  }
  class "RissoMixin" as garpar.datasets.risso.RissoMixin {
    generate_loss_probabilities(window_size)
    get_window_loss_probability(window_size, entropy)
  }
  class "RissoLevyStable" as garpar.datasets.risso.RissoLevyStable {
    alpha : simetria
    beta : curtosis
    mu : media
    sigma : desvio estándar
    make_stock_price(price, loss, random)
  }
  class "RissoNormal" as garpar.datasets.risso.RissoNormal {1
    mu : media
    sigma : desvio estándar
    make_stock_price(price, loss, random)
  }
  class "RissoUniform" as garpar.datasets.risso.RissoUniform {
    high : alta
    low : baja
    make_stock_price(price, loss, random)
  }
}

garpar.datasets.ds_base.RandomEntropyPortfolioMakerABC --|> garpar.datasets.ds_base.PortfolioMakerABC
garpar.datasets.multisector.MultiSector --|> garpar.datasets.ds_base.PortfolioMakerABC
garpar.datasets.risso.RissoLevyStable --|> garpar.datasets.ds_base.RandomEntropyPortfolioMakerABC
garpar.datasets.risso.RissoLevyStable --|> garpar.datasets.risso.RissoMixin
garpar.datasets.risso.RissoNormal --|> garpar.datasets.ds_base.RandomEntropyPortfolioMakerABC
garpar.datasets.risso.RissoNormal --|> garpar.datasets.risso.RissoMixin
garpar.datasets.risso.RissoUniform --|> garpar.datasets.ds_base.RandomEntropyPortfolioMakerABC
garpar.datasets.risso.RissoUniform --|> garpar.datasets.risso.RissoMixin
garpar.optimize.mean_variance.MVOptimizer --|> garpar.optimize.opt_base.MeanVarianceFamilyMixin
garpar.optimize.mean_variance.MVOptimizer --|> garpar.optimize.opt_base.OptimizerABC
garpar.optimize.mean_variance.Markowitz --|> garpar.optimize.opt_base.MeanVarianceFamilyMixin
garpar.optimize.mean_variance.Markowitz --|> garpar.optimize.opt_base.OptimizerABC

garpar.core.portfolio.Portfolio o-- garpar.core.div_acc.DiversificationAccessor
garpar.core.portfolio.Portfolio o-- garpar.core.plot_acc.PortfolioPlotter
garpar.core.portfolio.Portfolio o-- garpar.core.risk_acc.RiskAccessor
garpar.core.portfolio.Portfolio o-- garpar.core.prices_acc.PricesAccessor
garpar.core.portfolio.Portfolio o-- garpar.core.covcorr_acc.CovarianceAccessor
garpar.core.portfolio.Portfolio o-- garpar.core.covcorr_acc.CorrelationAccessor
garpar.core.portfolio.Portfolio o-- garpar.core.ereturns_acc.ExpectedReturnsAccessor
garpar.core.portfolio.Portfolio o-- garpar.core.utilities_acc.UtilitiesAccessor

@enduml
